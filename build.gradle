plugins {
    id "org.sonarqube" version "3.5.0.2730"
    id 'org.asciidoctor.jvm.convert' version '2.4.0'
    id "org.gradle.test-retry" version "1.5.0"
    id "io.github.gradle-nexus.publish-plugin"  version "2.0.0"
    id "me.champeau.jmh" version "0.6.8"
    id 'idea'
    id 'jacoco-report-aggregation'
    id 'jvm-test-suite'
}

apply from: "${rootDir}/libraries.gradle"

allprojects {
    apply plugin: 'jacoco'

    version = '2.4.0-SNAPSHOT'
    group = 'io.github.resilience4j'
    description = 'Resilience4j is a lightweight, easy-to-use fault tolerance library designed for Java8 and functional programming'

    repositories {
        mavenCentral()
    }

    jacoco {
        toolVersion = "0.8.8"
    }
}

ext {
    coreProjects = subprojects.findAll {
        p -> !p.name.endsWith("-bom")
    }
}

normalization {
    runtimeClasspath {
        metaInf {
            ignoreAttribute("Build-Time")
            ignoreAttribute("Build-Date")
        }
    }
}

dependencies {
    coreProjects.each { jacocoAggregation project(":${it.name}") }
}

nexusPublishing {
    repositories {
        sonatype {
            stagingProfileId = '64e8d6879f4e95'
        }
    }
}

configure(project.coreProjects) {
    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'
    apply from: "${rootDir}/publishing.gradle"
    apply plugin: "org.gradle.test-retry"
    apply plugin: 'me.champeau.jmh'

    tasks.withType(Test).all {
        if (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_17)) {
            jvmArgs += [
                    "-XX:+AllowRedefinitionToAddDeleteMethods", "--add-opens=java.base/java.lang=ALL-UNNAMED",  "--add-opens=java.base/java.util.concurrent.locks=ALL-UNNAMED", "--add-opens=java.base/java.time=ALL-UNNAMED", "--add-opens=java.base/java.io=ALL-UNNAMED"
            ]
        }
    }


    dependencies {
        implementation (libraries.slf4j)

        // JSR-305 only used for non-required meta-annotations
        compileOnly "com.google.code.findbugs:jsr305:3.0.2"

        testImplementation (libraries.vavr)
        testImplementation (libraries.junit)
        testImplementation (libraries.assertj)
        testImplementation (libraries.logback)
        testImplementation (libraries.mockito)
        testImplementation (libraries.powermock)
        testImplementation (libraries.powermock_api_mockito)
        testImplementation (libraries.powermock_module_junit4)
        testImplementation (libraries.awaitility)
        testImplementation (libraries.jaxws)
    }

    tasks.withType(JavaCompile) {
        sourceCompatibility = "17"
        targetCompatibility = "17"
        options.deprecation = true
        options.encoding = 'UTF-8'
        options.compilerArgs += ["-Xlint:unchecked", "-parameters"]
    }

    test {
        retry {
            maxRetries = 3
            maxFailures = 20
            failOnPassedAfterRetry = true
        }
    }

    jacocoTestReport {
        reports {
            xml.required.set(true)
        }
    }

    afterEvaluate {
        jar {
            from('../') {
                include 'COPYRIGHT.txt'
                include 'LICENSE.txt'
            }

            inputs.property('moduleName', moduleName)
            manifest.attributes(
                    'Automatic-Module-Name': moduleName
            )
        }
    }
}

def allTestCoverageFile = "${rootProject.projectDir}/build/reports/jacoco/testCodeCoverageReport/testCodeCoverageReport.xml"

sonarqube {
    properties {
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.organization", "resilience4j"
        property "sonar.projectName", "resilience4j"
        property "sonar.projectKey", "resilience4j_resilience4j"
        property "sonar.links.homepage", "https://github.com/resilience4j/resilience4j"
        property "sonar.links.ci", "https://github.com/resilience4j/resilience4j/actions"
        property "sonar.links.scm", "https://github.com/resilience4j/resilience4j"
        property "sonar.links.issue", "https://github.com/resilience4j/resilience4j/issues"
        property "sonar.language", "java"
        property "sonar.coverage.jacoco.xmlReportPaths", allTestCoverageFile
    }
}

tasks.check.dependsOn tasks.testCodeCoverageReport
